História do Java
Java é uma linguagem de programação orientada a objetos desenvolvida na década de 90, na empresa Sun Microsystems e posteriormente adquirida pela Oracle em 2008.
Desde seu lançamento, em maio de 1995, a plataforma Java foi adotada mais rapidamente do que qualquer outra linguagem de programação na história da computação.

Característica
Diferente das linguagens de programação compiladas, (a compilação do código se dá ainda em tempo de desenvolvimento) a linguagem Java é compilada para um bytecode que é interpretado por uma máquina virtual (JVM).

Plataforma x Linguagem
A linguagem de programação Java é a linguagem convencional da Plataforma Java, mas não é a sua única linguagem.
Uma grande vantagem da plataforma é a de não estar presa a um único sistema operacional ou hardware, pois seus programas rodam através de uma máquina virtual que pode ser emulada.
Java SE (Java Platform, Standard Edition)
Java EE (Java Platform, Enterprise Edition)
Java ME (Java Platform, Micro Edition)

Fases da Execução Java
1. Escrevemos o seu código-fonte (arquivo com a extensão .java)
2. Utilizamos o JDK para compilar o seu código-fonte e gerar o arquivo bytecode (arquivo com a extensão .class)
3. Para executar o seu programa, a JVM lê o arquivo compilado (.class) e as bibliotecas padrões do Java que estão no JRE

JDK x JRE
JDK (Java Development Kit) -  é o Kit de Desenvolvimento Java responsável por compilar código-fonte (.java) em bytecode (.class)
JVM (Java Virtual Machine) - é a Máquina Virtual do Java responsável por executar o bytecode (.class)
JRE (Java Runtime Environment) - Ambiente de Execução do Java que fornece as bibliotecas padrões do Java para o JDK compilar o seu código e para a JVM executar o seu programa

Versões do Java
Principal diferença entre OpenJDK e JDK Oracle: o OpenJDK é um Java totalmente open source com uma GNU General Public License e já o JDK Oracle requer uma licença comercial sob o Contrato de Licença de Código Binário Oracle
Os lançamentos das versões OpenJDK LTS (suporte de longo prazo) acontecem pelo menos a acada quatro anos

O que é IDE?
IDE ou ambiente de desenvolvimento integrado, é um software que combina ferramentas comuns de desenvolvimento em uma única interface gráfica do usuário (GUI), facilitando o desenvolvimento de aplicações
O Java possui um conjunto de ferramentas para se desenvolver programas baseados nele, que são conhecidos como Java Development Kit ou JDK, sendo este o ambiente voltado para dos desenvolvedores
A JDK faz parte do funcionamento das IDE's - programas de desenvolvimento como IntelliJ, Eclipse, NetBeans, entre outros.

Eclipse é uma IDE para desenvolvimento Java, porém suporta várias outras linguagens. Ele foi feito em Java e segue o modelo open source de desenvolvimento de software
O IntelliJ IDEA é um ambiente de desenvolvimento integrado escrito em Java para o desenvolvimento de software de computador.
Está disponível como uma edição da comunidade licenciada Apache 2,  [6] e em uma edição comercial proprietária.

github.com/cami-la/curso-dio-dominando-ides-java


Variáveis, tipos de dados e operadores matemáticos em Java

Variável: um espaço na memória do computador no qual se pode guardar valores.
Existem 4 tipos: Instância - objeto; Classe - classe; Local: dentro de métodos; Parâmetro - na assinatura do método.

Padrão de criação da variável Java: <?visibilidade?><?modificador?>tipo nome<?=valorInicial?>;
V:"public", "protected" e "private"
M:"static" e "final"
T: tipo de dado
N: nome que é fornecido a variável
VI: um valor inicial, caso se deseje

Convenções e Regras
Não devem começar com números; Embora permitido, "$" e "_" devem ser evitados; São case-sensitive; Sem espaços; Não podem ser palavras reservadas do Java:

abstract continue for new switch assert default goto package synchronizedboolean do if private this break double case implements throw protect byte else import public 
throws enum instanceof return transient catch extends int short try char final interface static void class finally long strictfp volatile const float native super while

Sempre começar com letra minúscula; nomes expressivos; notação camelo; quando constante (final) maiúscula e separada por "_";

Tipos de dados: são valores e consequentemente operações que as variáveis podem assumir e sofrer, respsctivamente.
Tipificação: Estática (forte) vs Dinâmica (fraco); Primitivo vs Composto
Tipos de dados: textual; numeral; lógico; objeto.
Textual - char: caracteres de 16-bit unicode - char C = '\u0084'; ou char c = 'T';
	  String: um tipo "especial" - String S = "T";
Lógico - boolean: true e false - boolean s = false;
Numeral - byte: -128 até 127 - byte b = 15
	  short: -32.768 até 32.767 - short s = -15785;
	  int: -2.147.483.648 até 2.147.483.647 - int i = 8515785;
	  long: -9.223.372.036.854.775.808 até 9.223.372.036.854.775.807 - long l = 5938515785L;
	  float: ±3.40282347E+38F - float f = 3.14...(f);
	  double: ±1.79769313486231570E+308 - double d = 3.14...(d);

Tipo de dado         |   Valor default
byte                 |        0
short                |        0
int                  |        0
long                 |        0L
float                |        0.0f
double               |        0.0d
char                 |	      '\u0000'
String (e objetos)   |        null
boolean              |	      false


Operadores Aritméticos: São símbolos especiais capazes de realizar ações específicas em um, dois ou mais operandos e - em seguida - retornar um resultado.
Tipos de operadores - pós-fixado: exp++ ou exp--
		      prefixado: ++exp ou --exp
		      aritmético: +, -, *, / e %
		      atribuição: =, +=, -=, *=, /= e %=

Exemplos: int i = ++k; -> i = k + 1;		int j = k-- -> j = k;k = k-1;		float f = 1.5f + 4.5f;		long I = 10398L * 5L;
	  double d = 45d / 4d			int k = 15 % 4 				double d = f;			i += 5; -> i = i + 5;
	  j -= 3; -> j = j -3;			d /= 2.7d; -> d = d/ 2.7d; 		I *= 3; -> I = I *3;		k %= 2; -> k = k % 2;

Operador             |   Precedência
Pós-fixado           |   exp++, exp--
Prefixado            |   ++exp, --exp
Multiplicativo       |   *, /, %
Aditivo              |   +, -
Atribuição           |   =, +=, -=, *=, /= e %=

	
Conversões (casting) 
É a transformação de uma determinada variável de tipo menos específico para um tipo mais específico ou vice-versa.
Tipos: Upcast (implícito); Downcast (explícito).

Utilização

__________byte__|__short__|__char__|__int__|__long__|__float__|__double__|
byte   |xxxxxxxx|__U - I__|__char__|_U - I_|__U - I_|__U - I__|___U - I__|
short  |__D - E_|xxxxxxxxx|__char__|_U - I_|__U - I_|__U - I__|___U - I__|
char   |__D - E_|__D - E__|xxxxxxxx|_U - I_|__U - I_|__U - I__|___U - I__|
int    |__D - E_|__D - E__|__D - E_|xxxxxxx|__U - I_|__U - I__|___U - I__|
long   |__D - E_|__D - E__|__D - E_|_D - E_|xxxxxxxx|__U - I__|___U - I__|
float  |__D - E_|__D - E__|__D - E_|_D - E_|__D - E_|xxxxxxxxx|___U - I__|
double |__D - E_|__D - E__|__D - E_|_D - E_|__D - E_|__D - E__|xxxxxxxxxx|


Exemplos

long I; int i = 10; I = i;
int i; long I = 100; i = (int) I;
double d; float f = 10.5f; d = f;
float f; double d = 10.5d; f = (float) d;
int i; float f = 10.5f; i = (int) f;


Entendendo métodos Java - Slides
github.com/tlcdio


Operadores Relacionais
São símbolos especiais capazes de realizar comparações entre determinados operandos e, emseguida, retornar um resultado.
Tipos - Similaridade: igual, diferente; 
	Tamanho: maior, maior igual, menor, menor igual.
Similaridade - Igualdade: determina se um operando é igual ao outro
	       Diferença: determina se um operando não é igual ao outro
Simbologia - Igualdade: == ; Diferença: !=

Tamanho - Maior: determina se um operando é maior do que o outro;
	  Maior igual: determina se um operando é maior ou igual a outro.
Simbologia - Maior: > ; Maior igual: >=;

Tamanho - Menor: determina se um operando é menor do que o outro;
	  Menor igual: determina se um operando é menor ou igual a outro.
Simbologia - Menor: < ; Menor igual: <=;

Exemplos: int i1 =10;   int i2 = 20;   float f1 = 4.5f;   float f2 = 3.5f;
	  char c1 = 'x';   char c2 = 'y';   String s1 = "Fulano";   String s2 = "Fulano";
	  boolean b1 = true;   boolean b2 = false;

i1 == i2, i1 != i2, i1 > i2, i1 <= i2
f1 == f2, f1 != f2, f1 >= f2, f1 < f2
c1 == c2, c1 != c2, c1 > c2, c1 <= c2
s1 == s2, s1 != s2,  erros s1 >= s2, s1 < s2
b1 == b2, b1 != b2,  erros b1 > b2, b1 <= i1
I2 > f1

Operadores Lógicos
São símbolos especiais quais são capazes de realizar comparações lógicas entre operandos lógicos ou expressões e, em seguida, retornar um resultado.
Tipos - Conjunção; Disjunção; Disjunção exclusiva; Negação

Conjunção: operação lógica que só é verdadeira quando ambos os operandos ou expressões envolvidas são verdade.
Simbologia: &&   -  Terminologia: and (e)
O - Operando;  E - Expressão;   R - Resultado;

O - E  |  O - E  |  R
  V    |    V    |  V
  V    |    F    |  F
  F    |    V    |  F
  F    |    F    |  F


Disjunção: operação que só é falsa quando ambos os operandos ou expressões envolvidas são falsas.
Simbologia: ||   -  Terminologia: or (ou)
O - Operando;  E - Expressão;   R - Resultado;

O - E  |  O - E  |  R
  V    |    V    |  V
  V    |    F    |  V
  F    |    V    |  V
  F    |    F    |  F


Disjunção exclusiva: operação que só é verdade quando ambos os operandos ou expressões são oposto.
Simbologia: ^   -  Terminologia: xor
O - Operando;  E - Expressão;   R - Resultado;

O - E  |  O - E  |  R
  V    |    V    |  F
  V    |    F    |  V
  F    |    V    |  V
  F    |    F    |  F


Negação: operação que inverte o valor lógico de um operando ou expressão.
Simbologia: !   -  Terminologia: inverção
O - Operando;  E - Expressão;   R - Resultado;

 O - E  |  R
   V    |  F
   F    |  V


Curiosidades
Operadores btwise: & e I
Operadores shift: ~, >>, >>>, <<


Exemplos

boolean b1 = true ;  boolean b2 = false
boolean b3 = true ;  boolean b4 = false

b1 && b2,  b1 && b3
b2 || b3,  b2 || b4
b1 ^ b3,  b4 ^ b1
!b1,  !b2
(i1 > i2) || (f2 < f1)
((i1 + i2) < (f2 - f1)) && true

Boas Práticas

Crie variáveis auxiliares para guardar resultados intermediários

(salarioMensal < mediaSalario) && (quantidadeDependentes >= mediaDependentes)
pode ser
(salarioBaixo) && (muitosDependentes)

boolean recebeAuxilio = (salariobaixo) && (muitosDependentes)


Controle de Fluxo - São estruturas que tem a capacidade de direcionar o fluxo de execução do código.
Tipos - Decisão: if, if-else, switch e operador ternário
	Repetição: for, while, do while
	Interrupção: break, continue e return

Decisão: estrutura que avalia uma condição booleana ou varoável para direcionar o fluxo de execução
Opções: if (se), switch (escolha) e operador ternário
Tipos - Decisão: if, if-else, if-else-if, if-else-if-else
		
Código --->  se  -----> fim
	      |   true
        false |
	      |
	      V
	     fim

Tipos - Decisão: if, if-else, if-else-if

if (condição) {          if (condição) {          if (condição) {          
}			 } else {                 } else if (condição) {
			 }			  } else { 
						  }

Tipos - Decisão: if, if-else, if-else-if

if (idade > 18) {        if (aprovado) {          if (casado && temFilhos) {          
}			 } else {                 } else if (casado && semFilhos) {
			 }			  } else { 
						  }

Tipos - Decisão: operador ternário

    _________________________       
    |	       true         |
    |			    |
    |			    |
condição        ?         exp 1     :     exp 2
    |					     |
    |			          false      |
    |________________________________________|


Tipos - Decisão: operador ternário

condição ? true : false;         condição ? true: null;
ligado ? desligar : ligar;	 emMovimento ? freia : null;

Tipos - Decisão: escolha

código
   |--------> variável --------> Caso 1 --------> Caso ... --------> fim
				    |	false	    |	    false
				    |		    |
				    V		    V
				   true            true

Tipos - Decisão: switch

Váriavel:            switch (variável) {
byte		     case 1:
short		     break;
char		     case ...:
int		     break;
Enum		     default:
String 	             break;
		     }

 Decisão: switch

Tipos:               switch (olhos) {
Decisão		     case "AZUIS":
		     break;
		     case "VERDES":
		     break;
		     case "CASTANHOS":
 	             break;
		     default:
 	             break;
		     }

Boas práticas
Switch é para valores exatos e if para expressões booleanas
Evitar usar o default do switch para "cases genéricos"
Evitaro efeito "flecha" dos if's
Evitar muitos if's aninhados
Usar a boa prática da aula 2 para diminuir o tamanho if

Blocos: um grupo de 0 ou mais códigos que trabalham em conjunto para executar uma operação.
Tipos - Locais: dentro dos métodos;  Estáticos: dentro de classes;   Instância: dentro de classes

Criação - Tipos - Locais
	{
	...
	{

if (autorizado) {			if (autorizado) {
   CarregarPerfil			    ...
   DirecionarPáginaPrincipal		} else {
}					    ...
					}

if (menorIdade)
   DirecionarPáginaProibido

https://github.com/cami-la/loops-e-arrays





